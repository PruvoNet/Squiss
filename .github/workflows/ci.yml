name: CI

on:
  push:
    branches:
      - master
  release:
    types: [ published ]
  pull_request:
    branches:
      - '**'
  repository_dispatch:
    types: [ retest ]

env:
  PRIMARY_NODE_VERSION: 14.x
  BC_NODE_VERSIONS: 6.x,8.x
  PRIMARY_OS: ubuntu-latest
  FORCE_COLOR: true
  REGISTRY: https://registry.npmjs.org/

jobs:
  test:
    name: CI
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest ]
        node-version: [ 6.x, 8.x, 10.x, 12.x, 14.x, 15.x ]

    steps:
      - name: Echo env variables
        run: |
          echo ref: ${{ github.event.client_payload.ref || github.ref }}
          echo sha: ${{ github.event.client_payload.sha || github.sha }}
          echo head ref: ${{ github.event.client_payload.head_ref || github.head_ref }}
          echo base ref: ${{ github.event.client_payload.base_ref || github.base_ref }}
          echo action: ${{ github.action }}
          echo event: ${{ github.event_name }}

      - uses: actions/checkout@v2
        name: Checkout
        with:
          ref: ${{ github.event.client_payload.ref || github.ref }}

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v1
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-${{ matrix.node-version }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.node-version }}-yarn-

      - name: Install dependencies and build
        run: |
          yarn --ignore-engines --frozen-lockfile
          yarn run check-clean-workspace-after-install
          yarn run bootstrap

      - name: Verify types
        if: matrix.node-version == env.PRIMARY_NODE_VERSION && matrix.os == env.PRIMARY_OS
        run: yarn run lint

      - name: Compile
        run: yarn run compile

      - name: Run unit tests backawrad compatabile
        if: "!(matrix.node-version == env.PRIMARY_NODE_VERSION && matrix.os == env.PRIMARY_OS) && contains(env.BC_NODE_VERSIONS, matrix.node-version)"
        run: yarn run test:unit:bc

      - name: Run unit tests
        if: "!(matrix.node-version == env.PRIMARY_NODE_VERSION && matrix.os == env.PRIMARY_OS) && !contains(env.BC_NODE_VERSIONS, matrix.node-version)"
        run: yarn run test:unit

      - name: Run unit tests with coverage
        if: matrix.node-version == env.PRIMARY_NODE_VERSION && matrix.os == env.PRIMARY_OS
        run: yarn run test:cover

      - name: SonarCloud Scan
        if: matrix.node-version == env.PRIMARY_NODE_VERSION && matrix.os == env.PRIMARY_OS
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  publish_version:
    name: Publish
    runs-on: ubuntu-latest
    needs: [ test ]
    if: github.event_name == 'release' && github.event.action == 'published'
    steps:
      - uses: actions/checkout@v2
      - run: |
          git fetch --prune --unshallow

      - name: Use Node.js ${{ env.PRIMARY_NODE_VERSION }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ env.PRIMARY_NODE_VERSION }}
          registry-url: ${{ env.REGISTRY }}

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v1
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-${{ matrix.node-version }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.node-version }}-yarn-

      - name: Install dependencies and build
        run: |
          yarn --ignore-engines --frozen-lockfile
          yarn run check-clean-workspace-after-install
          yarn run bootstrap
          yarn run build

      - name: Publish
        run: |
          yarn config set registry $REGISTRY
          yarn config set username $NPM_AUTH_USER
          yarn config set email $NPM_AUTH_EMAIL
          npm config set //registry.npmjs.org/:_authToken=$NPM_AUTH_TOKEN
          yarn publish --non-interactive --no-git-tag-version
        env:
          NPM_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}
          NPM_AUTH_USER: ${{ secrets.NPM_AUTH_USER }}
          NPM_AUTH_EMAIL: ${{ secrets.NPM_AUTH_EMAIL }}
